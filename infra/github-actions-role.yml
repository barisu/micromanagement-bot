AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM Role for GitHub Actions to deploy serverless application'

Parameters:
  GitHubOrg:
    Type: String
    Description: GitHub organization name
    Default: YourGitHubOrgName
  
  RepositoryName:
    Type: String
    Description: GitHub repository name
    Default: management-bot
  
  OIDCProviderArn:
    Type: String
    Description: ARN of the GitHub OIDC provider
    Default: arn:aws:iam::ACCOUNT_ID:oidc-provider/token.actions.githubusercontent.com

Resources:
  ServerlessDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GitHubActionsServerlessDeployRole
      Description: Role for GitHub Actions to deploy serverless applications
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref OIDCProviderArn
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GitHubOrg}/${RepositoryName}:*
      Policies:
        - PolicyName: ECRPermissionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # ECRアクセス - コンテナイメージの管理
              - Effect: Allow
                Action:
                  - ecr:CreateRepository
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource:
                  - !Sub arn:aws:ecr:ap-northeast-1:${AWS::AccountId}:repository/micromanagement-bot*
                  - !Sub arn:aws:ecr:ap-northeast-1:${AWS::AccountId}:repository/serverless-micromanagement-bot*
              
              # ECR認証トークン取得 (リソース制限なし)
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
        - PolicyName: ServerlessDeploymentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # CloudFormationアクセス - Serverless Frameworkが使用
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - cloudformation:ListStacks
                  - cloudformation:ValidateTemplate
                Resource: !Sub arn:aws:cloudformation:ap-northeast-1:${AWS::AccountId}:stack/micromanagement-bot-dev/*
              
              # S3アクセス - デプロイアーティファクト用
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::micromanagement-bot-dev-*
                  - !Sub arn:aws:s3:::micromanagement-bot-dev-*/*
              
              # Lambdaアクセス
              - Effect: Allow
                Action:
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:GetFunction
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:InvokeFunction
                  - lambda:AddPermission
                  - lambda:RemovePermission
                  - lambda:GetPolicy
                Resource: !Sub arn:aws:lambda:ap-northeast-1:${AWS::AccountId}:function:micromanagement-bot-dev-*
              
              # API Gatewayアクセス
              - Effect: Allow
                Action:
                  - apigateway:GET
                  - apigateway:POST
                  - apigateway:PUT
                  - apigateway:DELETE
                  - apigateway:PATCH
                Resource:
                  - !Sub arn:aws:apigateway:ap-northeast-1::/restapis
                  - !Sub arn:aws:apigateway:ap-northeast-1::/restapis/*
              
              # CloudWatchログアクセス
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogGroup
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                Resource:
                  - !Sub arn:aws:logs:ap-northeast-1:${AWS::AccountId}:log-group:/aws/lambda/micromanagement-bot-dev-*
              
              # IAMロール管理（Lambda実行ロール用）
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:PutRolePolicy
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:PassRole
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/micromanagement-bot-dev-*

Outputs:
  RoleARN:
    Description: ARN of the IAM Role for GitHub Actions
    Value: !GetAtt ServerlessDeployRole.Arn
