AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for micromanagement-bot application'

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment stage (dev, prod, etc.)
  
  InfraStackName:
    Type: String
    Description: Infrastructure stack name
    Default: micromanagement-bot-infra-dev
  
  ImageTag:
    Type: String
    Description: Docker image tag to deploy
    Default: latest
  
  SlackSigningSecret:
    Type: String
    NoEcho: true
    Description: Slack Signing Secret
  
  SlackBotToken:
    Type: String
    NoEcho: true
    Description: Slack Bot Token
  
  SlackChannel:
    Type: String
    Description: Slack Channel ID
  
  TaskListId:
    Type: String
    Description: Google Tasks List ID
  
  ClientId:
    Type: String
    NoEcho: true
    Description: Google OAuth Client ID
  
  ClientSecret:
    Type: String
    NoEcho: true
    Description: Google OAuth Client Secret
  
  RedirectUri:
    Type: String
    Description: Google OAuth Redirect URI
  
  RefreshToken:
    Type: String
    NoEcho: true
    Description: Google OAuth Refresh Token
  
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key
  
  SlackUserId:
    Type: String
    Description: Slack User ID

Resources:
  # Slack Lambda関数
  SlackFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub micromanagement-bot-${Stage}-slack
      Role: 
        Fn::ImportValue: !Sub ${InfraStackName}-LambdaExecutionRoleArn
      PackageType: Image
      Code:
        ImageUri: 
          Fn::Sub:
            - "${ECRRepositoryUri}:${ImageTag}"
            - ECRRepositoryUri:
                Fn::ImportValue: !Sub ${InfraStackName}-ECRRepositoryUri
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          SLACK_BOT_TOKEN: !Ref SlackBotToken
          SLACK_CHANNEL: !Ref SlackChannel
          TASK_LIST_ID: !Ref TaskListId
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          REDIRECT_URI: !Ref RedirectUri
          REFRESH_TOKEN: !Ref RefreshToken
          OPENAI_API_KEY: !Ref OpenAIApiKey
          SLACK_USER_ID: !Ref SlackUserId
  
  # Daily Report Lambda関数
  DailyReportFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub micromanagement-bot-${Stage}-dailyReport
      Role: 
        Fn::ImportValue: !Sub ${InfraStackName}-LambdaExecutionRoleArn
      PackageType: Image
      Code:
        ImageUri: 
          Fn::Sub:
            - "${ECRRepositoryUri}:${ImageTag}"
            - ECRRepositoryUri:
                Fn::ImportValue: !Sub ${InfraStackName}-ECRRepositoryUri
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          SLACK_BOT_TOKEN: !Ref SlackBotToken
          SLACK_CHANNEL: !Ref SlackChannel
          TASK_LIST_ID: !Ref TaskListId
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          REDIRECT_URI: !Ref RedirectUri
          REFRESH_TOKEN: !Ref RefreshToken
          OPENAI_API_KEY: !Ref OpenAIApiKey
          SLACK_USER_ID: !Ref SlackUserId
  
  # Slack API Integration
  SlackApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: 
        Fn::ImportValue: !Sub ${InfraStackName}-ApiGatewayId
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt SlackFunction.Arn
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
  
  # Slack API Route
  SlackApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: 
        Fn::ImportValue: !Sub ${InfraStackName}-ApiGatewayId
      RouteKey: POST /slack/events
      Target: !Sub integrations/${SlackApiIntegration}
  
  # Lambda Permission for API Gateway
  SlackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SlackFunction
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub:
          - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*/*/slack/events"
          - ApiGatewayId:
              Fn::ImportValue: !Sub ${InfraStackName}-ApiGatewayId
  
  # Lambda Permission for EventBridge
  DailyReportFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DailyReportFunction
      Principal: events.amazonaws.com
      SourceArn: 
        Fn::ImportValue: !Sub ${InfraStackName}-DailyReportScheduleArn

Outputs:
  SlackFunctionArn:
    Description: Slack Lambda Function ARN
    Value: !GetAtt SlackFunction.Arn
  
  DailyReportFunctionArn:
    Description: Daily Report Lambda Function ARN
    Value: !GetAtt DailyReportFunction.Arn
  
  SlackEndpoint:
    Description: Slack events endpoint URL
    Value: 
      Fn::Sub:
        - "${ApiGatewayEndpoint}slack/events"
        - ApiGatewayEndpoint:
            Fn::ImportValue: !Sub ${InfraStackName}-ApiGatewayEndpoint
