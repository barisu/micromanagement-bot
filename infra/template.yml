AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for micromanagement-bot'

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment stage (dev, prod, etc.)
  
  SlackSigningSecret:
    Type: String
    NoEcho: true
    Description: Slack Signing Secret
  
  SlackBotToken:
    Type: String
    NoEcho: true
    Description: Slack Bot Token
  
  SlackChannel:
    Type: String
    Description: Slack Channel ID
  
  TaskListId:
    Type: String
    Description: Google Tasks List ID
  
  ClientId:
    Type: String
    NoEcho: true
    Description: Google OAuth Client ID
  
  ClientSecret:
    Type: String
    NoEcho: true
    Description: Google OAuth Client Secret
  
  RedirectUri:
    Type: String
    Description: Google OAuth Redirect URI
  
  RefreshToken:
    Type: String
    NoEcho: true
    Description: Google OAuth Refresh Token
  
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key
  
  SlackUserId:
    Type: String
    Description: Slack User ID

Resources:
  # ECRリポジトリ
  MicromanagementBotRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub micromanagement-bot-${Stage}
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
  
  # S3バケット（デプロイメントバケット）
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub micromanagement-bot-deployments-${Stage}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  
  # Lambda実行ロール
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub micromanagement-bot-${Stage}-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: MicromanagementBotLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/micromanagement-bot-${Stage}-*:*
  
  # Slack Lambda関数
  SlackFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub micromanagement-bot-${Stage}-slack
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MicromanagementBotRepository}:latest
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          SLACK_BOT_TOKEN: !Ref SlackBotToken
          SLACK_CHANNEL: !Ref SlackChannel
          TASK_LIST_ID: !Ref TaskListId
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          REDIRECT_URI: !Ref RedirectUri
          REFRESH_TOKEN: !Ref RefreshToken
          OPENAI_API_KEY: !Ref OpenAIApiKey
          SLACK_USER_ID: !Ref SlackUserId
  
  # Daily Report Lambda関数
  DailyReportFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub micromanagement-bot-${Stage}-dailyReport
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MicromanagementBotRepository}:latest
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          SLACK_BOT_TOKEN: !Ref SlackBotToken
          SLACK_CHANNEL: !Ref SlackChannel
          TASK_LIST_ID: !Ref TaskListId
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          REDIRECT_URI: !Ref RedirectUri
          REFRESH_TOKEN: !Ref RefreshToken
          OPENAI_API_KEY: !Ref OpenAIApiKey
          SLACK_USER_ID: !Ref SlackUserId
  
  # API Gateway
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub micromanagement-bot-${Stage}-api
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - Authorization
  
  # API Gateway Stage
  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: $default
      AutoDeploy: true
  
  # Slack API Integration
  SlackApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt SlackFunction.Arn
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000
  
  # Slack API Route
  SlackApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: POST /slack/events
      Target: !Sub integrations/${SlackApiIntegration}
  
  # Lambda Permission for API Gateway
  SlackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SlackFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/slack/events
  
  # EventBridge Schedule Rule
  DailyReportSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: dailyReportSchedule
      Description: '毎日20時に実行される定期タスク（日本時間）'
      ScheduleExpression: cron(0 11 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt DailyReportFunction.Arn
          Id: DailyReportFunctionTarget
          Input: '{"eventType":"dailyReport"}'
  
  # Lambda Permission for EventBridge
  DailyReportFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DailyReportFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DailyReportSchedule.Arn

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/
  
  SlackEndpoint:
    Description: Slack events endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/slack/events
  
  ECRRepository:
    Description: ECR Repository URL
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MicromanagementBotRepository}
