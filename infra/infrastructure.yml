AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for micromanagement-bot infrastructure'

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment stage (dev, prod, etc.)
  
  SlackSigningSecret:
    Type: String
    NoEcho: true
    Description: Slack Signing Secret
  
  SlackBotToken:
    Type: String
    NoEcho: true
    Description: Slack Bot Token
  
  SlackChannel:
    Type: String
    Description: Slack Channel ID
  
  TaskListId:
    Type: String
    Description: Google Tasks List ID
  
  ClientId:
    Type: String
    NoEcho: true
    Description: Google OAuth Client ID
  
  ClientSecret:
    Type: String
    NoEcho: true
    Description: Google OAuth Client Secret
  
  RedirectUri:
    Type: String
    Description: Google OAuth Redirect URI
  
  RefreshToken:
    Type: String
    NoEcho: true
    Description: Google OAuth Refresh Token
  
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key
  
  SlackUserId:
    Type: String
    Description: Slack User ID

Resources:
  # ECRリポジトリ
  MicromanagementBotRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    Properties:
      RepositoryName: !Sub micromanagement-bot-${Stage}
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
  
  # S3バケット（デプロイメントバケット）
  DeploymentBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub micromanagement-bot-deployments-${Stage}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  
  # Lambda実行ロール
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub micromanagement-bot-${Stage}-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: MicromanagementBotLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/micromanagement-bot-${Stage}-*:*
  
  # API Gateway
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub micromanagement-bot-${Stage}-api
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - Authorization
  
  # API Gateway Stage
  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: $default
      AutoDeploy: true
  
  # EventBridge Schedule Rule
  DailyReportSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: dailyReportSchedule
      Description: '毎日20時に実行される定期タスク（日本時間）'
      ScheduleExpression: cron(0 11 * * ? *)
      State: ENABLED

Outputs:
  LambdaExecutionRoleArn:
    Description: Lambda実行ロールのARN
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaExecutionRoleArn
  
  ApiGatewayId:
    Description: API GatewayのID
    Value: !Ref ApiGateway
    Export:
      Name: !Sub ${AWS::StackName}-ApiGatewayId
  
  ApiGatewayEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/
    Export:
      Name: !Sub ${AWS::StackName}-ApiGatewayEndpoint
  
  ECRRepositoryName:
    Description: ECR Repository Name
    Value: !Ref MicromanagementBotRepository
    Export:
      Name: !Sub ${AWS::StackName}-ECRRepositoryName
  
  ECRRepositoryUri:
    Description: ECR Repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MicromanagementBotRepository}
    Export:
      Name: !Sub ${AWS::StackName}-ECRRepositoryUri
  
  DailyReportScheduleArn:
    Description: EventBridge Schedule Rule ARN
    Value: !GetAtt DailyReportSchedule.Arn
    Export:
      Name: !Sub ${AWS::StackName}-DailyReportScheduleArn
